<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Love Game for Tala 💖</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #ffb3c1, #ffe0e9);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      text-align: center;
    }
    #gameApp {
      background: #fff;
      padding: 30px;
      border-radius: 20px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }
    .screen {
      display: none;
    }
    .screen.active {
      display: block;
    }
    h2 {
      color: #ff4081;
      margin-bottom: 20px;
    }
    .btn-row {
      display: flex;
      justify-content: space-around;
      margin-top: 20px;
      position: relative;
      height: 80px;
    }
    button {
      background: #ff4081;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 15px 30px;
      font-size: 18px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.3s ease;
      user-select: none;
    }
    button:hover {
      background: #e73370;
    }
    #heartZone {
      position: relative;
      height: 250px;
      background: #fdeff3;
      border: 2px dashed #ffabc5;
      overflow: hidden;
      margin-bottom: 10px;
    }
    .heart {
      position: absolute;
      font-size: 24px;
      color: #ff4081;
      animation: fall 4s linear forwards;
      user-select: none;
      cursor: pointer;
    }
    @keyframes fall {
      0% { top: -30px; opacity: 1; }
      100% { top: 260px; opacity: 0; }
    }
    #cardBoard {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
      justify-items: center;
      margin-top: 20px;
    }
    .card {
      width: 80px;
      height: 120px;
      background: #ffdde1;
      border-radius: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 36px;
      cursor: pointer;
      user-select: none;
    }
    .card.flipped {
      background: #ff4081;
      color: white;
    }
    #finalMsg {
      color: #ff4081;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div id="gameApp">
    <!-- Screen 1 -->
    <div id="screen1" class="screen active">
      <h2>Tala, do you love me?</h2>
      <div class="btn-row">
        <button id="yesBtn">Yes</button>
        <button id="noBtn">No</button>
      </div>
    </div>

    <!-- Stage 1: Catch hearts -->
    <div id="stage1" class="screen">
      <h2>Catch as many hearts as you can in 15 seconds!</h2>
      <div id="heartZone"></div>
      <div>Score: <span id="heartScore">0</span></div>
    </div>

    <!-- Stage 2: Guess the card -->
    <div id="stage2" class="screen">
      <h2>Find the surprise card!</h2>
      <div id="cardBoard"></div>
      <div id="cardMessage"></div>
    </div>

    <!-- Final screen -->
    <div id="final" class="screen">
      <h2 id="finalMsg"></h2>
      <button id="restartBtn">Play Again</button>
    </div>
  </div>
  <script>
    const yesBtn = document.getElementById('yesBtn');
    const noBtn = document.getElementById('noBtn');
    const screen1 = document.getElementById('screen1');
    const stage1 = document.getElementById('stage1');
    const stage2 = document.getElementById('stage2');
    const final = document.getElementById('final');
    const restartBtn = document.getElementById('restartBtn');
    const heartZone = document.getElementById('heartZone');
    const heartScoreSpan = document.getElementById('heartScore');
    const cardBoard = document.getElementById('cardBoard');
    const cardMessage = document.getElementById('cardMessage');
    const finalMsg = document.getElementById('finalMsg');

    let moving = false;

    yesBtn.addEventListener('click', () => {
      showScreen(stage1);
      startStage1();
    });

    noBtn.addEventListener('click', e => {
      e.preventDefault();
    });

    const dodgeDistance = 100;
    const btnRow = document.querySelector('.btn-row');
    btnRow.addEventListener('mousemove', e => {
      if (moving) return;
      const rect = noBtn.getBoundingClientRect();
      const mx = e.clientX;
      const my = e.clientY;
      const cx = rect.left + rect.width / 2;
      const cy = rect.top + rect.height / 2;
      const dx = mx - cx;
      const dy = my - cy;
      const dist = Math.hypot(dx, dy);
      if (dist < dodgeDistance) {
        moveNoRandom();
      }
    });

    function moveNoRandom() {
      moving = true;
      const parentRect = btnRow.getBoundingClientRect();
      const btnW = noBtn.offsetWidth;
      const btnH = noBtn.offsetHeight;
      const padding = 10;
      const maxX = parentRect.width - btnW - padding;
      const maxY = parentRect.height - btnH - padding;
      const randX = Math.random() * maxX;
      const randY = Math.random() * maxY;
      noBtn.style.transform = `translate(${randX - noBtn.offsetLeft}px, ${randY - noBtn.offsetTop}px)`;
      noBtn.style.transition = 'transform 0.3s ease';
      setTimeout(() => { moving = false; }, 400);
    }

    function showScreen(screen) {
      [screen1, stage1, stage2, final].forEach(s => s.classList.remove('active'));
      screen.classList.add('active');
    }

    function startStage1() {
      let score = 0;
      heartScoreSpan.textContent = score;
      const duration = 15000;
      const spawnInterval = 800;
      const spawnTimer = setInterval(spawnHeart, spawnInterval);

      function spawnHeart() {
        const h = document.createElement('div');
        h.classList.add('heart');
        h.textContent = '❤️';
        const x = Math.random() * (heartZone.clientWidth - 30);
        h.style.left = `${x}px`;
        heartZone.appendChild(h);
        h.addEventListener('click', () => {
          score++;
          heartScoreSpan.textContent = score;
          h.remove();
        });
        h.addEventListener('animationend', () => { h.remove(); });
      }

      setTimeout(() => {
        clearInterval(spawnTimer);
        setTimeout(() => {
          showScreen(stage2);
          startStage2();
        }, 500);
      }, duration);
    }

    function startStage2() {
      cardBoard.innerHTML = '';
      cardMessage.textContent = '';
      const cards = ['🎁', '🌟', '🎉', '🎈'];
      const positions = shuffle([...cards]);
      positions.forEach(symbol => {
        const c = document.createElement('div');
        c.classList.add('card');
        c.textContent = '?';
        cardBoard.appendChild(c);
        c.addEventListener('click', () => {
          if (c.classList.contains('flipped')) return;
          c.classList.add('flipped');
          c.textContent = symbol;
          if (symbol === '🎁') {
            cardMessage.textContent = "You found the surprise!";
            setTimeout(finishGame, 1000);
          } else {
            cardMessage.textContent = "Nope, guess again!";
            setTimeout(() => {
              c.classList.remove('flipped');
              c.textContent = '?';
              cardMessage.textContent = '';
            }, 1000);
          }
        });
      });
    }

    function shuffle(arr) {
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function finishGame() {
      showScreen(final);
      finalMsg.textContent = "I knew you'd play — I love you 💖";
    }

    restartBtn.addEventListener('click', () => {
      showScreen(screen1);
      heartScoreSpan.textContent = '0';
    });
  </script>
</body>
</html>
